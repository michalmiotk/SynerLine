#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <math.h>
#include <algorithm>
#include<stdlib.h>
#include<time.h>
using namespace cv;
using namespace std;
Mat src, src_gray;
Mat dst, detected_edges;
Mat deleting_trash;
Mat obraz_zapis;
int edgeThresh = 1;
int lowThreshold=0;
int  maxThreshold = 2;
int ratio = 3;
int kernel_size = 3;
int min_length=3;
int max_length=30;
int line_length=10;
char* min_name =    "controls";
char* max_name =    "controls";
char* min_len =     "controls";
char* max_len =		"controls";
char* line_len =    "controls";
int prog=0;
int prog_histogram=0;
   Size frameSize(static_cast<int>(320), static_cast<int>(240));
int srednia(int tab[]){
	int suma=0;
	for(int i=0; i<line_length; i++)
	{
		suma=suma+tab[i];
	}
	return suma/line_length;
}
void find_horizontal(Mat &imagein, Mat &imageout);
void find_vertical(Mat &imagein, Mat &imageout);
void CannyThreshold(int, void*)
{
  Mat dst;
  Mat img ;
  src_gray.copyTo(img);
  int histSize = 256;
  float range[] = { 0, 256} ;
  const float* histRange = { range };

  bool uniform = true; 
  bool accumulate = false;
  Mat grey_hist;
  calcHist( &img, 1, 0, Mat(), grey_hist, 1, &histSize, &histRange, uniform, accumulate );
  int hist_w = 512; 
  int hist_h = 400;
  int bin_w = cvRound( (double) hist_w/histSize );

  Mat histImage( hist_h, hist_w, CV_8UC3, Scalar( 0,0,0) );
  
  normalize(grey_hist, grey_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat() );

  for( int i = 1; i < histSize; i++ ){
    line( histImage, Point( bin_w*(i-1), hist_h - cvRound(grey_hist.at<float>(i-1)) ) ,
    Point( bin_w*(i), hist_h - cvRound(grey_hist.at<float>(i)) ),
    Scalar( 120, 120, 120), 2, 8, 0  );
    
  }
  int jasnosc=0;
  //for( int j = 1; j < histSize; j++ ) {cout<<cvRound(grey_hist.at<float>(j))<<endl; jasnosc= jasnosc+cvRound(grey_hist.at<float>(j));}
	cout<<histSize<<"to wielk hit"<<endl;
	cout<<jasnosc;
  int max=0;
  int min=0;
  int min_count=0;
  int max_count=0;
  int z=1;
  int min_change=0;
  int max_change=0;
  while((min_count<100 || max_count<100) && z<histSize/2){
    min_count=min_count+cvRound(grey_hist.at<float>(z));
	max_count=max_count+cvRound(grey_hist.at<float>(histSize-z));
	if(min_count>=100 && !min_change){min=z; min_change=1; }
	if(max_count>=100 && !max_change){max=histSize-z; max_change=1; }
	z++;
  }
  prog_histogram=256*((max-min)/3)/histSize;
  prog_histogram=prog_histogram*2;
  cout<<"prog histogram to "<<prog_histogram<<endl;
  int licznik=0;
  int mianownik=0;
  for(int rows=1; rows<src_gray.rows-1; rows++)
  {
	  for(int columns=1 ; columns<src_gray.cols-1;columns++)
	  {
		int gx=0, gy=0, g=0;
		gx=abs(src_gray.at<uchar>(rows+1,columns)-src_gray.at<uchar>(rows-1,columns));
		gy=abs(src_gray.at<uchar>(rows,columns+1)-src_gray.at<uchar>(rows,columns-1));
		g=std::max((float)gx ,(float)gy);
		licznik=licznik+src_gray.at<uchar>(rows,columns);
		mianownik=mianownik+g;
	  }
  }
  prog=licznik/mianownik;
  prog=prog*2;
  cout<<"prog to"<<prog<<endl;
  namedWindow("Hist", CV_WINDOW_AUTOSIZE );
  imshow("Hist", histImage );
  //std::vector<Mat> hsv_split;

// blur( src_gray,src_gray, Size(3,3) );
 /*
  for(int rows=0; rows<detected_edges.rows; rows++)
  {
	int counter = 0 ;
	int begin = 0 ;
	int end =0 ;
	int out = 0;
	for(int columns=max_length; columns<detected_edges.cols - max_length; columns++)
	{
		if(detected_edges.at<uchar>(rows,columns)>0) 
		{
			if(counter > min_length && counter < max_length) { end =1; } else 
			{
				begin = 1;
				end = 0;
				counter = 0;
			}
		 }
		if(counter>max_length) { begin = 1; end= 0; counter = 0 ;}
		if(end){ end = 0 ;   deleting_trash.at<uchar>(rows,columns) = 255; counter = 0; } else {deleting_trash.at<uchar>(rows,columns) = 0;}
	}
  }
  */

 Mat out;
 src_gray.copyTo(out);
 Mat wyszukiwanie_odchylenie;
 src_gray.copyTo(wyszukiwanie_odchylenie);
 //KOLUMNY
  for(int rows=0; rows<src_gray.rows; rows++)
  {
    int max[2]={0,0};
    int min[2]={0,0};
	for(int columns=maxThreshold; columns<src_gray.cols ; columns++)
	{
		if(src_gray.at<uchar>(rows,columns)-src_gray.at<uchar>(rows,columns-maxThreshold)>max[0])
		{
			max[0]=src_gray.at<uchar>(rows,columns)-src_gray.at<uchar>(rows,columns-maxThreshold);
			max[1]=columns;
		}
		if(src_gray.at<uchar>(rows,columns)-src_gray.at<uchar>(rows,columns-maxThreshold)<min[0])
		{
			min[0]=src_gray.at<uchar>(rows,columns)-src_gray.at<uchar>(rows,columns-maxThreshold);
			min[1]=columns;
		}
	}
	if(max[1]-min[1]>min_length && max[1]-min[1]<max_length && max[0]-min[0]>-lowThreshold+prog_histogram){

			line(out, Point(min[1],rows), Point(min[1],rows), (255,255,255), 5, 8, 0);
			//line(src_gray, Point(10,0), Point(200,200), (122,122,122), 2, 8, 0);
			line(out, Point(max[1],rows), Point(max[1],rows), (115,115,115), 5, 8, 0);
	}
  }
  //RZEDY
  for(int columns=0; columns<src_gray.cols; columns++)
  {
    int max[2]={0,0};
    int min[2]={0,0};
	for(int rows=maxThreshold; rows<src_gray.rows; rows++)
	{
		if(src_gray.at<uchar>(rows,columns)-src_gray.at<uchar>(rows-maxThreshold,columns)>max[0])
		{
			max[0]=src_gray.at<uchar>(rows,columns)-src_gray.at<uchar>(rows-maxThreshold,columns);
			max[1]=rows;
		}
		if(src_gray.at<uchar>(rows,columns)-src_gray.at<uchar>(rows-maxThreshold,columns)<min[0])
		{
			min[0]=src_gray.at<uchar>(rows,columns)-src_gray.at<uchar>(rows-maxThreshold,columns);
			min[1]=rows;
		}
	}
	if(max[1]-min[1]>min_length && max[1]-min[1]<max_length && max[0]-min[0]>-lowThreshold+prog_histogram){

			line(out, Point(columns,min[1]), Point(columns,min[1]), (255,255,255), 5, 8, 0);
			//line(src_gray, Point(10,0), Point(200,200), (122,122,122), 2, 8, 0);
			line(out, Point(columns,max[1]), Point(columns,max[1]), (115,115,115), 5, 8, 0);
	}
  }
  
  imshow("gray scale", src_gray );
  imshow("deritative",out);
  Mat line;
  src_gray.copyTo(line);
  find_horizontal(src_gray, wyszukiwanie_odchylenie);
  find_vertical(src_gray, wyszukiwanie_odchylenie);
  for(int rows=0; rows<wyszukiwanie_odchylenie.rows; rows++)
  {
    int quantity=0;
	int sum_position=0;
	int pozycja=0;
	for(int columns=0; columns<wyszukiwanie_odchylenie.cols ; columns++)
	{
		if(wyszukiwanie_odchylenie.at<uchar>(rows,columns)>225)
		{
			quantity++;
			sum_position=sum_position+columns;
		}
	}
	if(quantity>0)
	{
		pozycja=sum_position/quantity;
		line.at<uchar>(rows,pozycja) = 250;
	}
  }
  imshow("line", line);
  imshow("piksele", wyszukiwanie_odchylenie);
  wyszukiwanie_odchylenie.copyTo(obraz_zapis);
 }


int main( int argc, char** argv )
{
	
 CvCapture* vid = cvCreateFileCapture("sample.mp4");
// tworzymy okno wyswietlajace obraz
cvNamedWindow("plik wideo", 0);
 
// odczytanie pierwszej klatki - niezbedne do prawidlowego odczytania wlasciwosci pliku
// przy uzyciu funkcji cvGetCaptureProperty
cvQueryFrame(vid);
 
// odczytujemy z wlasciwosci pliku liczbe klatek na sekunde
double fps =  cvGetCaptureProperty(vid, CV_CAP_PROP_FPS);
// wyliczamy czas potrzebny do odtwarzania pliku z prawidlowa prêdkoscia
int odstep_miedzy_klatkami = 1000 / fps;
 VideoWriter oVideoWriter ("C:/synerline.avi", CV_FOURCC('P','I','M','1'), 30, frameSize, true); //initialize the VideoWriter object 
 oVideoWriter.write(obraz_zapis);
while (true)
{
// pobranie kolejnej ramki
IplImage* ramka = cvQueryFrame(vid);
 
// jezeli nie jest pusta to wyswietlamy
if (ramka != 0)
{
	cvShowImage("plik wideo", ramka);
cv::Mat src = cv::cvarrToMat(ramka);
	// Mat src;                    //Miejsce na obrazki  
  //src = imread( "sunflower.jpg");       
  if( !src.data )
  { return -1; }
  dst.create( src.size(), src.type() );
  Mat hsv_channels;
  Mat hsv_split[3];
  cvtColor( src, hsv_channels, CV_BGR2HSV );
  split(hsv_channels, hsv_split);
  hsv_split[2].copyTo(src_gray);
  	Mat img;
	src_gray.copyTo(img);
	/*
	Mat kernel(3,3,CV_8UC1,cv::Scalar(0));
	// assigns kernel values
	kernel.at<uchar>(1,1)= 1;
	kernel.at<uchar>(0,1)= 1;
	kernel.at<uchar>(2,1)= 1;
	kernel.at<uchar>(1,0)= 1;
	kernel.at<uchar>(1,2)= 1;
	kernel.at<uchar>(0,0)= 1;
	kernel.at<uchar>(2,2)= 1;
	kernel.at<uchar>(2,0)= 1;
	kernel.at<uchar>(0,2)= 1;
	//filter the image
	cv::filter2D(img,img,img.depth(),kernel);
	*/
	cv::GaussianBlur(src_gray, img, cv::Size(0, 0), 3);
	cv::GaussianBlur(img, img, cv::Size(0, 0), 3);
	cv::GaussianBlur(img, img, cv::Size(0, 0), 3);
	cv::GaussianBlur(img, img, cv::Size(0, 0), 3);
	cv::GaussianBlur(img, img, cv::Size(0, 0), 3);
	cv::GaussianBlur(img, img, cv::Size(0, 0), 3);
	cv::GaussianBlur(img, img, cv::Size(0, 0), 3);
	cv::GaussianBlur(img, img, cv::Size(0, 0), 3);
	cv::addWeighted(src_gray, 2, img, -1.2, 0, img);
	namedWindow( "Sharpen", WINDOW_AUTOSIZE );
    imshow( "Sharpen", img );
	
  namedWindow( min_name, CV_WINDOW_AUTOSIZE );
  namedWindow( max_name, CV_WINDOW_AUTOSIZE );
  namedWindow( min_len, CV_WINDOW_AUTOSIZE );
  namedWindow( max_len, CV_WINDOW_AUTOSIZE );
  createTrackbar( "bialy-czarny", min_name, &lowThreshold, 275, CannyThreshold );
  createTrackbar( "ile pikseli pochodna", max_name, &maxThreshold, 25, CannyThreshold );
  createTrackbar("min length", min_len, &min_length , 10 , CannyThreshold );
  createTrackbar("max length", max_len, &max_length , 80 , CannyThreshold );
  createTrackbar("line length", line_len, &line_length , 45 , CannyThreshold );
  /// Show the image
  CannyThreshold(0, 0);
  //img.copyTo(src_gray);
  //CannyThreshold(0, 0);
   //_sleep(1000);

}
else
{
	break;
}
// czekamy przez okreslony czas
int c = cvWaitKey(odstep_miedzy_klatkami);
 
// jezeli nacisnieto klawisz 'k', konczymy wyswietlanie
if (c == 'k')
break;
 
}
 
// zwolnienie zasobów
cvDestroyAllWindows();
cvReleaseCapture(&vid);
 

  /// Wait until user exit program by pressing a key
  waitKey(0);

  return 0;
  }
void find_horizontal(Mat &imagein, Mat &imageout)
{
	for(int rows=1; rows<imagein.rows-1; rows++)
  {
	  for(int columns=1 ; columns<imagein.cols-4*line_length;columns++)
	  {
		int srednia_lewa=0;
		int srednia_srodek=0;
		int srednia_prawa=0;
		int odchylenie_lewa=0;
		int odchylenie_srodek=0;
		int odchylenie_prawa=0;
		int odchyl_lewa=0, odchyl_srodek=0, odchyl_prawa=0;
		int tab_lewa[50];
		int tab_srodek[50];
		int tab_prawa[50];
		for(int z=0; z<line_length;z++) 
		{
			tab_lewa[z]=imagein.at<uchar>(rows,columns+z);
		}
		srednia_lewa=srednia(tab_lewa);
		for(int z=0; z<line_length;z++) 
		{
			tab_srodek[z]=imagein.at<uchar>(rows,columns+1.5*line_length+z);
		}
		srednia_srodek=srednia(tab_srodek);
		for(int z=0; z<line_length;z++) 
		{
			tab_prawa[z]=imagein.at<uchar>(rows,columns+3*line_length+z);
		}
		srednia_prawa=srednia(tab_prawa);
		for(int z=0; z<line_length;z++) 
		{
			odchyl_prawa=odchyl_prawa+(int)pow(tab_prawa[z]-odchylenie_prawa,2);
		}
		odchylenie_prawa=sqrt(odchyl_prawa/line_length);
		for(int z=0; z<line_length;z++) 
		{
			odchyl_srodek=odchyl_srodek+(int)pow(tab_prawa[z]-odchylenie_srodek,2);
		}
		odchylenie_srodek=sqrt(odchyl_srodek/line_length);
		for(int z=0; z<line_length;z++) 
		{
			odchyl_lewa=odchyl_lewa+(int)pow(tab_prawa[z]-odchylenie_lewa,2);
		}
		odchylenie_lewa=sqrt(odchyl_lewa/line_length);
		if(5*(srednia_lewa-srednia_prawa)<srednia_lewa && srednia_lewa-srednia_srodek>prog_histogram/2 && srednia_prawa-srednia_srodek>prog_histogram/3 && odchylenie_lewa+odchylenie_prawa<3000)
		{	
			line(imageout, Point(columns+2*line_length,rows), Point(columns+2*line_length,rows), (255,255,255), 5, 8, 0);
			//cout<<"r"<<rows<<"k"<<columns<<"l"<<odchylenie_lewa<<"s"<<odchylenie_srodek<<endl<<"p"<<odchylenie_prawa<<endl;
		}
	}
  }
 // imshow("pixel count horizontal", imageout);
}
void find_vertical(Mat &imagein, Mat &imageout)
{
	for(int columns=1; columns<imagein.cols-1; columns++)
  {
	  for(int rows=1 ; rows<imagein.rows-4*line_length;rows++)
	  {
		int srednia_lewa=0;
		int srednia_srodek=0;
		int srednia_prawa=0;
		int odchylenie_lewa=0;
		int odchylenie_srodek=0;
		int odchylenie_prawa=0;
		int odchyl_lewa=0, odchyl_srodek=0, odchyl_prawa=0;
		int tab_lewa[50];
		int tab_srodek[50];
		int tab_prawa[50];
		for(int z=0; z<line_length;z++) 
		{
			tab_lewa[z]=imagein.at<uchar>(rows+z,columns);
		}
		srednia_lewa=srednia(tab_lewa);
		for(int z=0; z<line_length;z++) 
		{
			tab_srodek[z]=imagein.at<uchar>(rows+1.5*line_length+z,columns);
		}
		srednia_srodek=srednia(tab_srodek);
		for(int z=0; z<line_length;z++) 
		{
			tab_prawa[z]=imagein.at<uchar>(rows+3*line_length+z,columns);
		}
		srednia_prawa=srednia(tab_prawa);
		for(int z=0; z<line_length;z++) 
		{
			odchyl_prawa=odchyl_prawa+(int)pow(tab_prawa[z]-odchylenie_prawa,2);
		}
		odchylenie_prawa=sqrt(odchyl_prawa/line_length);
		for(int z=0; z<line_length;z++) 
		{
			odchyl_srodek=odchyl_srodek+(int)pow(tab_prawa[z]-odchylenie_srodek,2);
		}
		odchylenie_srodek=sqrt(odchyl_srodek/line_length);
		for(int z=0; z<line_length;z++) 
		{
			odchyl_lewa=odchyl_lewa+(int)pow(tab_prawa[z]-odchylenie_lewa,2);
		}
		odchylenie_lewa=sqrt(odchyl_lewa/line_length);
		if(5*(srednia_lewa-srednia_prawa)<srednia_lewa && srednia_lewa-srednia_srodek>prog_histogram/2 && srednia_prawa-srednia_srodek>prog_histogram/3 && odchylenie_lewa+odchylenie_prawa<3000)
		{	
			line(imageout, Point(columns,rows+2*line_length), Point(columns,rows+2*line_length), (222,222,222), 5, 8, 0);
			//cout<<"r"<<rows<<"k"<<columns<<"l"<<odchylenie_lewa<<"s"<<odchylenie_srodek<<endl<<"p"<<odchylenie_prawa<<endl;
		}
	}
  }
  //imshow("pixel count vertical", imageout);
}