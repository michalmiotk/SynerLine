CvCapture* vid = cvCreateFileCapture("sample.mp4");
	for(int i=0; i<24;i++)cvQueryFrame(vid);
	double fps =  cvGetCaptureProperty(vid, CV_CAP_PROP_FPS); 
	int odstep_miedzy_klatkami= 1000/fps;
	while(1){ 
	   IplImage* ip= cvQueryFrame(vid);
	   cv::Mat img = cv::cvarrToMat(ip);
	   if ( !img.data )                                    //Sprawdzenie czy ładowanie obrazka przebiegło pomyslnie 
	    { 
		    cout << "Nie znaleziono pliku " <<  img_name << "."; 
		    return -1; 
		} 
	   if( !face_cascade.load( face_cascade_name ) )        //Ładowanie pliku ze sprawdzeniem poprawnoci 
		{ 
		    cout << "Nie znaleziono pliku " << face_cascade_name << "."; 
		    return -2; 
		} 
		namedWindow(window_name, CV_WINDOW_AUTOSIZE);    //Utworzenie okna (nazwa okna, ustalenie rozmiaru) 
		imshow("img", img);
		detectFace(img); 
		int c = cvWaitKey(odstep_miedzy_klatkami)
void detectFace( Mat img ) 
{ 
    vector<Rect> faces;                            //Utworzenie bufora na twarze 
    Mat img_gray;                                //Utworzenie bufora na obrazek w odcieniach szarosci 
 
    cvtColor(img, img_gray,  CV_BGR2GRAY );                //Konwersja obrazu do odcieni szarosci 
    //equalizeHist(img_gray, img_gray);                    //Zaaplikowanie do obrazu jego historogramu, poprawa kontrastu 
 
    face_cascade.detectMultiScale(img_gray, faces, 1.1, 3, 0|CV_HAAR_SCALE_IMAGE, Size(20, 20) ); 
    for( unsigned i = 0; i < faces.size(); i++ ) 
    { 
        Rect rect_face( faces[i] );    //Kwadrat okreslający twarz 
        //ellipse( img, center, Size( faces[i].width*0.5, faces[i].height*0.5), 0, 0, 360, Scalar( 255, 120, 12 ), 2, 2, 0 ); 
        rectangle(img, rect_face, Scalar( 120, 5, 86 ), 2, 2, 0  ); 
    } 
    imshow(window_name, img);                        //Pokazanie obrazka w oknmie o nazwie "Hello Face !" 
}

